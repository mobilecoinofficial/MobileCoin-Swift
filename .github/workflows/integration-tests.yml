name: integration-tests

on:
  workflow_dispatch:
    inputs:
      network:
        description: 'MobileCoin Network'
        required: true
        default: 'testNet'
        type: choice
        options:
          - 'mobiledev'
          - 'testNet'
          - 'dynamic(alphaDev)'

env:
  DEVELOPER_DIR: /Applications/Xcode_14.2.app/Contents/Developer

jobs:
  run-integration-tests:
    runs-on: macos-latest
    steps:
      - name: Set Ruby Version to 2.7
        uses: ruby/setup-ruby@359bebbc29cbe6c87da6bc9ea3bc930432750108
        with:
          ruby-version: '2.7'
          bundler-cache: true

      - name: Install 'rename' command 
        run: brew install rename

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Get Submodules
        working-directory: Vendor/libmobilecoin-ios-artifacts
        run: git submodule update --init --depth 1 --recursive

      - name: Install Gems
        run: |
          bundle config set --local deployment 'true'
          bundle config set --local path '.vendor/bundle'
          bundle config set --local clean 'true'
          bundle check || bundle install

      - name: Set the Network
        env:
          NETWORK_UNDER_TEST: ${{ github.event.inputs.network }}
        run: sed -i '' "s/NetworkPreset = \..*/NetworkPreset = .${NETWORK_UNDER_TEST}/" ./Tests/Integration/Network/NetworkConfigFixtures.swift

      - name: GCP Service Account
        run: |
          echo '${{ secrets.GCP_SERVICE_KEY }}' > "service-key.json"

      - name: Install Example Gems
        working-directory: ./Example
        run: |
          bundle config set --local deployment 'true'
          bundle config set --local path '.vendor/bundle'
          bundle config set --local clean 'true'
          bundle check || bundle install

      - name: Make Setup
        working-directory: ./Example
        run: make setup

      - name: Provide Dev Credentials
        working-directory: ./Example
        env:
          TEST_DEV_USER: ${{ secrets.DEV_NETWORK_AUTH_USERNAME }}
          TEST_DEV_PASSWORD: ${{ secrets.DEV_NETWORK_AUTH_PASSWORD }}
          TEST_NET_MNEMONICS: ${{ secrets.TESTNET_TEST_ACCOUNT_MNEMONICS_COMMA_SEPARATED }}
          DEV_NET_MNEMONICS: ${{ secrets.MOBILEDEV_TEST_ACCOUNT_MNEMONICS_COMMA_SEPARATED }}
          DYNAMIC_FOG_AUTH_SPKI: ${{ secrets.DYNAMIC_FOG_AUTHORITY_SPKI }}
          DYNAMIC_SEED_ENTROPIES: ${{ secrets.DYNAMIC_TEST_ACCOUNT_ENTROPIES_COMMA_SEPARATED }}
        run: |
          bundle exec pod keys set devNetworkAuthUsername "${TEST_DEV_USER}"
          bundle exec pod keys set devNetworkAuthPassword "${TEST_DEV_PASSWORD}"
          bundle exec pod keys set testNetTestAccountMnemonicsCommaSeparated "${TEST_NET_MNEMONICS}"
          bundle exec pod keys set mobileDevTestAccountMnemonicsCommaSeparated "${DEV_NET_MNEMONICS}"
          bundle exec pod keys set dynamicFogAuthoritySpki "${DYNAMIC_FOG_AUTH_SPKI}"
          bundle exec pod keys set dynamicTestAccountSeedEntropiesCommaSeparated "${DYNAMIC_SEED_ENTROPIES}"

      - name: Install pods for Example project
        working-directory: ./Example
        run: bundle exec pod install --deployment 

      - name: Generating CocoaPods Keys
        run: ./scripts/setkeysfor Example

      - name: Make Bootstrap PostKeys
        working-directory: ./Example
        run: make bootstrap 

      - name: Run Integration Tests On Example
        working-directory: ./Example
        run: export SCAN_XCODEBUILD_FORMATTER="xcpretty"; bundle exec fastlane scan --scheme "Integration Tests" --suppress_xcode_output

      - name: Archive Build Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs
          path: |
            ~/Library/Logs/scan

      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs
          path: |
            ./Example/test_output/report.html

