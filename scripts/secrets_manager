#!/bin/bash

function check_dependencies() {
  echo '----------------------------'
  echo 'Checking dependencies'
  echo '----------------------------'

  if ! [ -x "$(command -v age)" ]; then
  	echo 'age is not installed. installing with `brew install age`' >&2
  	brew install age;

    if ! [ -x "$(command -v age)" ]; then
  	  echo 'age is still not installed. installing with `brew install age`' >&2
  	  exit 1
	  else 
      echo 'all dependencies installed' 
    fi
	else 
    echo 'all dependencies installed' 
	fi

}

function check_dependencies_silent() {
  # Only emits messages upon failure & exit
  if ! [ -x "$(command -v age)" ]; then
  	brew install age;

    if ! [ -x "$(command -v age)" ]; then
  	  echo 'age is still not installed. installing with `brew install age`' >&2
  	  exit 1
	  else 
      echo 'dependencies installed, re-run script' 
      exit
    fi
	fi
}

function project_directory() {
  script_path=$(readlink -f "${BASH_SOURCE}")
  script_dir=$(dirname "$script_path")
  project_dir=$(dirname "$script_dir")
  echo "$project_dir"
}

function check_for_existing_keys() {
  security find-generic-password -a swift-repo-user -s swift-repo-private > /dev/null 2>1
  exit_code=$((exit_code | PIPESTATUS[0]))
  security find-generic-password -a swift-repo-user -s swift-repo-public > /dev/null 2>1
  exit_code=$((exit_code | PIPESTATUS[0]))

  if (( 0 == exit_code )); then
    if [ "$1" == "force_key_recreation" ]; then
      echo '----------------------------'
      echo 'existing keys found, deleting ...'
      echo '----------------------------'
      security delete-generic-password -a swift-repo-user -s swift-repo-public
      security delete-generic-password -a swift-repo-user -s swift-repo-private
    else
      echo '----------------------------'
      echo 'existing keys found, exiting'
      echo '----------------------------'
      exit 1;
    fi
  fi
}

