#!/bin/bash

function check_dependencies() {
  echo '----------------------------'
  echo 'Checking dependencies'
  echo '----------------------------'

  if ! [ -x "$(command -v age)" ]; then
  	echo 'age is not installed. installing with `brew install age`' >&2
  	brew install age;

    if ! [ -x "$(command -v age)" ]; then
  	  echo 'age is still not installed. installing with `brew install age`' >&2
  	  exit 1
	  else 
      echo 'all dependencies installed' 
    fi
	else 
    echo 'all dependencies installed' 
	fi

}

function check_dependencies_silent() {
  # Only emits messages upon failure & exit
  if ! [ -x "$(command -v age)" ]; then
  	brew install age;

    if ! [ -x "$(command -v age)" ]; then
  	  echo 'age is still not installed. installing with `brew install age`' >&2
  	  exit 1
	  else 
      echo 'dependencies installed, re-run script' 
      exit
    fi
	fi
}

function project_directory() {
  script_path=$(stat -f "${BASH_SOURCE[0]}")
  script_dir=$(dirname "$script_path")
  project_dir=$(dirname "$script_dir")
  echo "$project_dir"
}

function check_for_existing_keys() {
  set +e
  security find-generic-password -a swift-repo-user -s swift-repo-private > /dev/null 2>&1
  exit_code=$((exit_code | PIPESTATUS[0]))
  security find-generic-password -a swift-repo-user -s swift-repo-public > /dev/null 2>&1
  exit_code=$((exit_code | PIPESTATUS[0]))

  if (( 0 == exit_code )); then
  project_dir=$(project_directory)
    public_key="$(security find-generic-password -w -s swift-repo-public)"
    grep "$public_key" secrets/contributor_public_keys > /dev/null 2>&1
    exit_code=$((exit_code | PIPESTATUS[0]))
    if (( 0 == exit_code )); then
      echo '----------------------------'
      echo 'existing keys found, and are already included in the `secrets/contributor_public_keys`, exiting'
      echo '----------------------------'
      exit 1
    else
      echo '----------------------------'
      echo 'existing keys found, adding to `secrets/contributor_public_keys`'
      echo 'push this change and ask a contributor to re-encrypt with `scripts/reencrypt_secrets`'
      echo '----------------------------'

      project_dir=$(project_directory)
      echo "$public_key" >> "$project_dir/secrets/contributor_public_keys"
      exit 1
    fi
  fi
  set -e
}

function decrypt_secrets() {
  security find-generic-password -w -s swift-repo-private > /dev/null 2>&1

  script_path=$(stat -f "${BASH_SOURCE}")
  script_dir=$(dirname "$script_path")
  project_dir=$(dirname "$script_dir")
  keys_encrypted="$project_dir/secrets/keys.encrypted"

  age -d -i <(security find-generic-password -w -s swift-repo-private) "$keys_encrypted"
}

function set_secrets() {
  if [ "$#" -ne 1 ]; then
    echo "Illegal number of parameters"
  else
    source <(decrypt_secrets) 

    pushd "$(project_directory)/$1"

    bundle exec pod keys set devNetworkAuthUsername "$DEV_NETWORK_AUTH_USERNAME"
    bundle exec pod keys set devNetworkAuthPassword "$DEV_NETWORK_AUTH_PASSWORD"
    bundle exec pod keys set testNetTestAccountMnemonicsCommaSeparated "$TEST_ACCOUNT_MNEMONICS_COMMA_SEPERATED"
    bundle exec pod keys set dynamicFogAuthoritySpki "$DYNAMIC_FOG_AUTHORITY_SPKI"
    bundle exec pod keys set dynamicTestAccountSeedEntropiesCommaSeparated "$DYNAMIC_TEST_ACCOUNT_SEED_ENTROPIES_COMMA_SEPARATED"
    bundle exec pod keys set mobileDevTestAccountMnemonicsCommaSeparated "$MOBILEDEV_TEST_ACCOUNT_MNEMONICS_COMMA_SEPERATED"

    popd
  fi
}

function generate_and_rename_cocoapodkeys() {
  pushd "$(project_directory)/$1"

  bundle exec pod keys generate

  FILE=Pods/CocoaPodsKeys/ExampleKeys.h
  if test -f "$FILE"; then
    echo "----------------------------"
    echo "Keys files generated with INCORRECT name, renaming"
    echo "----------------------------"
    set -x
    find . -name "*ExampleKeys*" | xargs -n 1 -I {} sed -i ''  's/ExampleKeys/MobileCoinKeys/g' {} ;
    rm Pods/CocoaPodsKeys/MobileCoinKeys* || true; rename 's/Example/MobileCoin/' Pods/CocoaPodsKeys/*
    set +x
    echo "----------------------------"
    echo "Naming substitution complete"
    echo "----------------------------"
  else
    echo "----------------------------"
    echo "Keys files generated with correct name."
    echo "----------------------------"
  fi

  popd
}

function check_for_contributor_public_keys() {
    echo '----------------------------'
    echo 'Checking for valid public keys file'
    echo '----------------------------'

    project_dir=$(project_directory)
    contributor_public_keys="$project_dir/secrets/contributor_public_keys"

    if [ -s "$contributor_public_keys" ]; then
      # The file is not-empty.
      echo '----------------------------'
      echo "$(wc -l < "$contributor_public_keys") Public keys found"
      echo '----------------------------'
    else
      # The file is empty.
      echo '----------------------------'
      echo 'Public keys file not found, or empty, run `generate_and_save_contributor_keys`'
      echo '----------------------------'
      exit 1;
    fi
}
